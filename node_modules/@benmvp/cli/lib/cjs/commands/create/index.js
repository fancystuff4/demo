"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _path = require("path");

var _fsExtra = require("fs-extra");

var _args6 = require("../../cli/args");

var _utils = require("../utils");

var _utils2 = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INIT_SCRIPT_PATH = (0, _path.resolve)(__dirname, 'init.sh');
var FILES_TO_REPLACE_REPO_REFS = ['CONTRIBUTING.md', 'CHANGELOG.md'];

var initializeRepo = function initializeRepo(libraryName) {
  return _regenerator.default.async(function initializeRepo$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator.default.awrap((0, _utils.spawnAsync)(INIT_SCRIPT_PATH, [libraryName]));

        case 2:
        case "end":
          return _context.stop();
      }
    }
  });
};

var updatePackageJson = function updatePackageJson(sanitizedLibraryName, createOptions) {
  var packageJsonPath, updatedPackageJson;
  return _regenerator.default.async(function updatePackageJson$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          // update the package.json with the necessary properties
          packageJsonPath = (0, _path.resolve)(process.cwd(), sanitizedLibraryName, 'package.json');
          _context2.t0 = _utils2.getUpdatePackageInfo;
          _context2.next = 4;
          return _regenerator.default.awrap((0, _fsExtra.readJson)(packageJsonPath));

        case 4:
          _context2.t1 = _context2.sent;
          _context2.t2 = createOptions;
          updatedPackageJson = (0, _context2.t0)(_context2.t1, _context2.t2);
          _context2.next = 9;
          return _regenerator.default.awrap((0, _fsExtra.writeJson)(packageJsonPath, updatedPackageJson, {
            spaces: 2
          }));

        case 9:
        case "end":
          return _context2.stop();
      }
    }
  });
};

var replaceInFile = function replaceInFile(filePath, from, to) {
  var fileContents, replacedFileContents;
  return _regenerator.default.async(function replaceInFile$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return _regenerator.default.awrap((0, _fsExtra.readFile)(filePath));

        case 2:
          fileContents = _context3.sent.toString();
          replacedFileContents = fileContents.replace(new RegExp(from, 'g'), to);
          _context3.next = 6;
          return _regenerator.default.awrap((0, _fsExtra.writeFile)(filePath, replacedFileContents));

        case 6:
        case "end":
          return _context3.stop();
      }
    }
  });
};

var replaceRepoNameReferences = function replaceRepoNameReferences(sanitizedLibraryName) {
  var cwd, repoName;
  return _regenerator.default.async(function replaceRepoNameReferences$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          cwd = process.cwd(); // If there's no library name, we're using the CWD as repo root,
          // so we'll assume the name of CWD as the repo name

          repoName = sanitizedLibraryName || (0, _path.parse)(cwd).name;
          _context4.next = 4;
          return _regenerator.default.awrap(Promise.all(FILES_TO_REPLACE_REPO_REFS.map(function (filePath) {
            return replaceInFile((0, _path.resolve)(cwd, sanitizedLibraryName, filePath), 'benmvp-cli', repoName);
          })));

        case 4:
        case "end":
          return _context4.stop();
      }
    }
  });
};
/**
 * Creates a new library with the specified name set up with infrastructure using `@benmvp/cli`
 * @param {Object} [options] The configuration options for testing the library
 * @param {string} [options.name] The name of the library to create or update
 * @param {ModuleFormat[]} [options.formats] A list of the module formats to build
 * @param {string} [options.out] A path (relative or absolute) to the output directory
 *  for the built module formats
 * @param {TestMode[]} [options.modes] List of the types or modes of tests to run
 * @returns {Promise<Result>} The result of executing the create
 */


var _callee = function _callee() {
  var _ref,
      _ref$name,
      libraryName,
      _ref$formats,
      formats,
      _ref$out,
      out,
      _ref$modes,
      modes,
      sanitizedLibraryName,
      _args5 = arguments;

  return _regenerator.default.async(function _callee$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _ref = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {}, _ref$name = _ref.name, libraryName = _ref$name === void 0 ? _args6.CREATE_POS_ARGS.name.default : _ref$name, _ref$formats = _ref.formats, formats = _ref$formats === void 0 ? _args6.CREATE_ARGS.formats.default : _ref$formats, _ref$out = _ref.out, out = _ref$out === void 0 ? _args6.CREATE_ARGS.out.default : _ref$out, _ref$modes = _ref.modes, modes = _ref$modes === void 0 ? _args6.CREATE_ARGS.modes.default : _ref$modes;
          _context5.prev = 1;
          sanitizedLibraryName = libraryName.replace('@', '').replace('/', '-');
          _context5.next = 5;
          return _regenerator.default.awrap(initializeRepo(sanitizedLibraryName));

        case 5:
          _context5.next = 7;
          return _regenerator.default.awrap(updatePackageJson(sanitizedLibraryName, {
            libraryName: libraryName,
            formats: formats,
            out: out,
            modes: modes
          }));

        case 7:
          _context5.next = 9;
          return _regenerator.default.awrap(replaceRepoNameReferences(sanitizedLibraryName));

        case 9:
          // eslint-disable-next-line no-console
          console.log(libraryName ? "DONE! ".concat(libraryName, " successfully created.") : 'DONE! Repo successfully updated.');
          _context5.next = 15;
          break;

        case 12:
          _context5.prev = 12;
          _context5.t0 = _context5["catch"](1);
          return _context5.abrupt("return", {
            code: _context5.t0.code || 1,
            message: "Error running \"create\" command (name=".concat(libraryName, "; formats=").concat(formats.toString(), "; out=").concat(out, "; modes=").concat(modes.toString(), ")"),
            error: _context5.t0
          });

        case 15:
          return _context5.abrupt("return", {
            code: 0
          });

        case 16:
        case "end":
          return _context5.stop();
      }
    }
  }, null, null, [[1, 12]]);
};

exports.default = _callee;