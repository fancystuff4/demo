"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _args2 = require("../../cli/args");

var _utils = require("./utils");

var _runJest = _interopRequireDefault(require("./run-jest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Runs a one-time pass of the specified modes of tests
 * @param {Object} [options] The configuration options for testing the library
 * @param {TestMode[]} [options.modes] List of the types or modes of tests to run
 * @param {string} [options.pattern]  Regexp pattern string that is matched against
 *  all tests paths before executing the test
 * @param {boolean} [options.watch] Whether or not to re-run tests as source files change
 * @returns {Promise<Result>} The result of executing the test
 */
var _callee = function _callee() {
  var _ref,
      _ref$modes,
      modes,
      _ref$pattern,
      pattern,
      _ref$watch,
      watch,
      _args = arguments;

  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref$modes = _ref.modes, modes = _ref$modes === void 0 ? _args2.TEST_ARGS.modes.default : _ref$modes, _ref$pattern = _ref.pattern, pattern = _ref$pattern === void 0 ? _args2.TEST_ARGS.pattern.default : _ref$pattern, _ref$watch = _ref.watch, watch = _ref$watch === void 0 ? _args2.TEST_ARGS.watch.default : _ref$watch;
          _context.prev = 1;
          _context.next = 4;
          return _regenerator.default.awrap((0, _runJest.default)((0, _utils.getJestArgs)({
            modes: modes,
            pattern: pattern,
            watch: watch
          })));

        case 4:
          _context.next = 9;
          break;

        case 6:
          _context.prev = 6;
          _context.t0 = _context["catch"](1);
          return _context.abrupt("return", {
            code: 1,
            message: 'Error running "test" command',
            error: _context.t0
          });

        case 9:
          return _context.abrupt("return", {
            code: 0
          });

        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[1, 6]]);
};

exports.default = _callee;