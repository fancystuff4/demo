"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _path = require("path");

var _args2 = require("../../cli/args");

var _utils = require("../utils");

var _utils2 = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SCRIPT_PATH = (0, _path.resolve)(__dirname, 'run.sh');
/**
 * Runs a one-time pass of the specified integration tests
 * @param {Object} [options] The configuration options for testing the library
 * @param {TestMode[]} [options.modes] List of the types or modes of tests to run
 * @param {string} [options.pattern]  Regexp pattern string that is matched against
 *  all tests paths before executing the test
 * @returns {Promise<Result>} The result of executing the test
 */

var _callee = function _callee(_ref) {
  var _ref$modes, modes, _ref$pattern, pattern, testArgs;

  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _ref$modes = _ref.modes, modes = _ref$modes === void 0 ? _args2.INTEGRATE_ARGS.modes.default : _ref$modes, _ref$pattern = _ref.pattern, pattern = _ref$pattern === void 0 ? _args2.INTEGRATE_ARGS.pattern.default : _ref$pattern;
          _context.prev = 1;
          testArgs = (0, _utils2.getTestArgs)({
            modes: modes,
            pattern: pattern
          });
          _context.next = 5;
          return _regenerator.default.awrap((0, _utils.spawnAsync)(SCRIPT_PATH, testArgs));

        case 5:
          _context.next = 10;
          break;

        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](1);
          return _context.abrupt("return", {
            code: 1,
            message: 'Error running "integrate" command',
            error: _context.t0
          });

        case 10:
          return _context.abrupt("return", {
            code: 0
          });

        case 11:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[1, 7]]);
};

exports.default = _callee;