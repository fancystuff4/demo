"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseArgs = exports.DEFAULT_COMMAND = exports.INTEGRATE_COMMAND = exports.BUILD_COMMAND = exports.START_COMMAND = exports.TEST_COMMAND = exports.CREATE_COMMAND = exports.INTEGRATE_ARGS = exports.BUILD_ARGS = exports.START_ARGS = exports.TEST_ARGS = exports.CREATE_POS_ARGS = exports.CREATE_ARGS = void 0;

var _yargs = _interopRequireDefault(require("yargs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TEST_MODES = {
  modes: {
    describe: 'The types/modes of tests to run',
    alias: 'm',
    array: true,
    default: ['lint', 'type', 'spec']
  }
};
var TEST_PATTERN = {
  pattern: {
    describe: 'Regexp pattern string that is matched against all tests paths before executing the test',
    alias: 'p',
    string: true,
    default: ''
  }
};
var BUILD_FORMATS = {
  formats: {
    describe: 'The module formats to build',
    alias: 'f',
    array: true,
    default: ['type', 'esm', 'cjs']
  }
};
var OUTPUT_PATH = {
  out: {
    describe: 'Path to the output directory for the built formats',
    alias: 'o',
    default: '',
    string: true
  }
};

var CREATE_ARGS = _objectSpread({}, BUILD_FORMATS, {}, OUTPUT_PATH, {}, TEST_MODES);

exports.CREATE_ARGS = CREATE_ARGS;
var CREATE_POS_ARGS = {
  name: {
    description: 'Name of the library to create',
    default: '',
    string: true
  }
};
exports.CREATE_POS_ARGS = CREATE_POS_ARGS;

var TEST_ARGS = _objectSpread({}, TEST_MODES, {}, TEST_PATTERN, {
  watch: {
    describe: 'Re-run tests when source files change',
    alias: 'w',
    type: 'boolean',
    default: false
  }
});

exports.TEST_ARGS = TEST_ARGS;

var START_ARGS = _objectSpread({}, TEST_MODES, {}, TEST_PATTERN);

exports.START_ARGS = START_ARGS;

var BUILD_ARGS = _objectSpread({}, BUILD_FORMATS, {}, OUTPUT_PATH, {
  watch: {
    describe: 'Update built assets when source files change',
    alias: 'w',
    type: 'boolean',
    default: false
  }
});

exports.BUILD_ARGS = BUILD_ARGS;

var INTEGRATE_ARGS = _objectSpread({}, TEST_MODES, {}, TEST_PATTERN);

exports.INTEGRATE_ARGS = INTEGRATE_ARGS;
var CREATE_COMMAND = 'create';
exports.CREATE_COMMAND = CREATE_COMMAND;
var TEST_COMMAND = 'test';
exports.TEST_COMMAND = TEST_COMMAND;
var START_COMMAND = 'start';
exports.START_COMMAND = START_COMMAND;
var BUILD_COMMAND = 'build';
exports.BUILD_COMMAND = BUILD_COMMAND;
var INTEGRATE_COMMAND = 'integrate';
exports.INTEGRATE_COMMAND = INTEGRATE_COMMAND;
var DEFAULT_COMMAND = CREATE_COMMAND;
exports.DEFAULT_COMMAND = DEFAULT_COMMAND;

var parseArgs = function parseArgs(args) {
  return (0, _yargs.default)(args).version().command(TEST_COMMAND, 'Runs linting, typing & Jest tests for the library', TEST_ARGS).command(START_COMMAND, "Runs the lib's tests in watch mode", START_ARGS).command(BUILD_COMMAND, 'Builds the library into desired module formats', BUILD_ARGS).command(INTEGRATE_COMMAND, 'Runs integration tests for the library', INTEGRATE_ARGS).command(["".concat(CREATE_COMMAND, " [name]"), '$0'], 'Creates a new library with test/build infra using @benmvp/cli', function (commandYargs) {
    return commandYargs.options(CREATE_ARGS).positional('name', CREATE_POS_ARGS.name);
  }).completion().epilog('For more details, visit https://github.com/benmvp/benmvp-cli/blob/master/API.md').help().argv;
};

exports.parseArgs = parseArgs;