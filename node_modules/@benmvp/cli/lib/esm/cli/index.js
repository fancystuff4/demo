function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import pick from 'lodash/pick';
import { create, test as testCommand, start, build, integrate } from '..';
import { CREATE_ARGS, CREATE_POS_ARGS, TEST_ARGS, START_ARGS, BUILD_ARGS, INTEGRATE_ARGS, DEFAULT_COMMAND, parseArgs } from './args';
export var run = function run() {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var parsedArgs = parseArgs(args);

  var _parsedArgs$_ = _slicedToArray(parsedArgs._, 1),
      _parsedArgs$_$ = _parsedArgs$_[0],
      firstCommand = _parsedArgs$_$ === void 0 ? DEFAULT_COMMAND : _parsedArgs$_$;

  var command = firstCommand;

  switch (command) {
    case 'create':
      return create(pick(parsedArgs, [].concat(_toConsumableArray(Object.keys(CREATE_ARGS)), _toConsumableArray(Object.keys(CREATE_POS_ARGS)))));

    case 'build':
      return build(pick(parsedArgs, Object.keys(BUILD_ARGS)));

    case 'test':
      return testCommand(pick(parsedArgs, Object.keys(TEST_ARGS)));

    case 'integrate':
      return integrate(pick(parsedArgs, Object.keys(INTEGRATE_ARGS)));

    case 'start':
      return start(pick(parsedArgs, Object.keys(START_ARGS)));

    default:
      throw new Error("Command \"".concat(command, "\" is an invalid command. Pass \"--help\" for full list of commands."));
  }
};