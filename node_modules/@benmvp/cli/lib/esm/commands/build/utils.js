function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import { resolve } from 'path';
import flatten from 'lodash/flatten';
import BASE_TSCONFIG from '../test/tsconfig.json';
var VALID_BABEL_FORMATS = new Set(['cjs', 'esm']);
var BUILT_FILES_TO_REMOVE = ['**/__tests__/', '**/*.spec.*'];
/**
 * Gets an array of CLI options/arguments to pass babel, one for each valid format
 * @param {BuildArgs} options
 * @param {Set<ModuleFormat>} options.formats A set of the module formats to build
 * @param {string} options.out A path (relative or absolute) to the output directory
 *  for the built module formats
 * @param {boolean} options.watch A flag indicating whether or not to continuously
 *  generate the built module formats whenever source files change
 * @returns {BabelCLIOptions[]}
 */

export var getBabelCLIOptionsList = function getBabelCLIOptionsList(_ref) {
  var formats = _ref.formats,
      outputPath = _ref.out,
      watch = _ref.watch;

  var validatedFormats = _toConsumableArray(formats).filter(function (format) {
    return VALID_BABEL_FORMATS.has(format);
  });

  var argsList = validatedFormats.map(function (format) {
    return {
      babelOptions: {
        presets: [resolve(__dirname, "babel-config-".concat(format, ".js"))],
        babelrc: false
      },
      cliOptions: {
        filenames: [resolve(process.cwd(), 'src')],
        outDir: resolve(outputPath, format),
        extensions: '.ts,.tsx,.js,.jsx',
        watch: watch,
        copyFiles: true
      }
    };
  });
  return argsList;
};
/**
 * Gets a list of arguments to pass Typescript
 * @param {BuildArgs} options
 * @param {Set<ModuleFormat>} options.formats A set of the module formats to build
 * @param {string} options.out A path (relative or absolute) to the output directory
 *  for the type definitions
 * @param {boolean} options.watch A flag indicating whether or not to continuously
 *  generate the type definitions whenever source files change
 * @returns {string[] | null}
 */

export var getTypescriptArgs = function getTypescriptArgs(_ref2) {
  var formats = _ref2.formats,
      out = _ref2.out,
      watch = _ref2.watch;

  if (!formats.has('type')) {
    return null;
  }

  var compilerOptions = BASE_TSCONFIG.compilerOptions;
  var compilerOptionsAsArgs = flatten(Object.entries(compilerOptions).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        optionName = _ref4[0],
        optionValue = _ref4[1];

    return ["--".concat(optionName), "".concat(optionValue)];
  }));
  var args = [].concat(_toConsumableArray(compilerOptionsAsArgs), ['--pretty', '--declaration', '--declarationDir', resolve(out, 'types'), '--emitDeclarationOnly', '--noEmit', 'false', watch ? '--watch' : '', resolve(process.cwd(), 'src/index.ts')]);
  return args;
};
/**
 * Gets list of glob patterns of copied files that should be deleted after building
 * @param {string} outputPath A path (relative or absolute) to the output directory
 *  for the type definitions
 * @returns {string[]}
 */

export var getCopiedFilesToDelete = function getCopiedFilesToDelete(outputPath) {
  return BUILT_FILES_TO_REMOVE.map(function (glob) {
    return resolve(outputPath, glob);
  });
};