import _regeneratorRuntime from "@babel/runtime/regenerator";
import { resolve } from 'path';
import { promisify } from 'util';
import { exec } from 'child_process';
import runBabel from './run-babel';
import { BUILD_ARGS } from '../../cli/args';
import { getBabelCLIOptionsList, getTypescriptArgs, getCopiedFilesToDelete } from './utils';
var execAsync = promisify(exec);

var genTranspiledFiles = function genTranspiledFiles(buildArgs) {
  var babelArgsToRun, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, babelArgs;

  return _regeneratorRuntime.async(function genTranspiledFiles$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          babelArgsToRun = getBabelCLIOptionsList(buildArgs);
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 4;
          _iterator = babelArgsToRun[Symbol.iterator]();

        case 6:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 13;
            break;
          }

          babelArgs = _step.value;
          _context.next = 10;
          return _regeneratorRuntime.awrap(runBabel(babelArgs));

        case 10:
          _iteratorNormalCompletion = true;
          _context.next = 6;
          break;

        case 13:
          _context.next = 19;
          break;

        case 15:
          _context.prev = 15;
          _context.t0 = _context["catch"](4);
          _didIteratorError = true;
          _iteratorError = _context.t0;

        case 19:
          _context.prev = 19;
          _context.prev = 20;

          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }

        case 22:
          _context.prev = 22;

          if (!_didIteratorError) {
            _context.next = 25;
            break;
          }

          throw _iteratorError;

        case 25:
          return _context.finish(22);

        case 26:
          return _context.finish(19);

        case 27:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[4, 15, 19, 27], [20,, 22, 26]]);
};

var genTypedFiles = function genTypedFiles(buildArgs) {
  var typeScriptArgsToRun, command;
  return _regeneratorRuntime.async(function genTypedFiles$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          typeScriptArgsToRun = getTypescriptArgs(buildArgs);

          if (!typeScriptArgsToRun) {
            _context2.next = 13;
            break;
          }

          _context2.prev = 2;
          // when `benmvp-cli` is a module w/in a lib's node_modules, this should
          // still run the `tsc` script for `benmvp-cli`, which will run the tsc
          // binary. This was the easiest way to reliably get to the binary
          // no matter where we put the transpiled lib code
          command = "npx tsc ".concat(typeScriptArgsToRun.join(' '));
          _context2.next = 6;
          return _regeneratorRuntime.awrap(execAsync(command));

        case 6:
          // eslint-disable-next-line no-console
          console.log('Generated TypeScript definitions from src/index.ts.');
          _context2.next = 13;
          break;

        case 9:
          _context2.prev = 9;
          _context2.t0 = _context2["catch"](2);
          // eslint-disable-next-line no-console
          console.error(_context2.t0.stdout);
          throw Error('Unable able to generate type definitions');

        case 13:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[2, 9]]);
};

var deleteUnneededFiles = function deleteUnneededFiles(outDir) {
  return _regeneratorRuntime.async(function deleteUnneededFiles$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return _regeneratorRuntime.awrap(execAsync("npx rimraf ".concat(getCopiedFilesToDelete(outDir).join(' '))));

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  });
};
/**
 * Builds the library into the desired module formats at the specified location
 * @param {Object} [options] The configuration options for building the library
 * @param {ModuleFormat[]} [options.formats] A list of the module formats to build
 * @param {string} [options.out] A path (relative or absolute) to the output directory
 *  for the built module formats
 * @param {boolean} [options.watch] A flag indicating whether or not to continuously
 *  generate the built module formats whenever source files change
 * @returns {Promise<Result>} The result of executing the build
 */


export default (function _callee() {
  var _ref,
      _ref$formats,
      formats,
      _ref$out,
      out,
      _ref$watch,
      watch,
      uniqueFormats,
      outDir,
      buildOptions,
      _args4 = arguments;

  return _regeneratorRuntime.async(function _callee$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, _ref$formats = _ref.formats, formats = _ref$formats === void 0 ? BUILD_ARGS.formats.default : _ref$formats, _ref$out = _ref.out, out = _ref$out === void 0 ? BUILD_ARGS.out.default : _ref$out, _ref$watch = _ref.watch, watch = _ref$watch === void 0 ? BUILD_ARGS.watch.default : _ref$watch;
          _context4.prev = 1;
          uniqueFormats = new Set(formats);
          outDir = out || resolve(process.cwd(), 'lib');
          buildOptions = {
            formats: uniqueFormats,
            out: outDir,
            watch: watch
          }; // eslint-disable-next-line no-console

          console.log('\nBuilding...', '\n  formats:', formats.toString(), '\n  output dir:', outDir, '\n  watching?', watch ? 'yes' : 'no', '\n');
          _context4.next = 8;
          return _regeneratorRuntime.awrap(genTranspiledFiles(buildOptions));

        case 8:
          _context4.next = 10;
          return _regeneratorRuntime.awrap(genTypedFiles(buildOptions));

        case 10:
          _context4.next = 12;
          return _regeneratorRuntime.awrap(deleteUnneededFiles(outDir));

        case 12:
          _context4.next = 17;
          break;

        case 14:
          _context4.prev = 14;
          _context4.t0 = _context4["catch"](1);
          return _context4.abrupt("return", {
            code: _context4.t0.code || 1,
            message: "Error running \"build\" command (formats=".concat(formats.toString(), "; out=").concat(out, ")"),
            error: _context4.t0
          });

        case 17:
          return _context4.abrupt("return", {
            code: 0
          });

        case 18:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, [[1, 14]]);
});