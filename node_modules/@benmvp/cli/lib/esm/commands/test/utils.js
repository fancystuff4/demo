function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import { resolve } from 'path';
// NOTE: Ideally we'd point to project configuration objects for
// each type instead of files that contain the configuration, but
// Jest kept throwing an error even though it says it supports the
// functionality. See: https://github.com/facebook/jest/issues/7415
export var VALID_TEST_MODES = {
  type: resolve(__dirname, 'project-type.js'),
  lint: resolve(__dirname, 'project-lint.js'),
  spec: resolve(__dirname, 'project-spec.js')
};
/**
 * Retrieves the arguments to pass to Jest based on the specified options
 * @param {Args} options The configuration options for testing the library
 * @param {TestMode[]} options.modes List of the types or modes of tests to run
 * @param {string} options.pattern  Regexp pattern string that is matched against all
 *  tests paths before executing the test
 * @param {boolean} options.watch Whether or not to re-run tests as source files change
 * @returns {string[]} The array of arguments
 */

export var getJestArgs = function getJestArgs(_ref) {
  var modes = _ref.modes,
      pattern = _ref.pattern,
      watch = _ref.watch;
  var validModes = modes.filter(function (mode) {
    return mode in VALID_TEST_MODES;
  });

  if (!validModes.length || validModes.length < modes.length) {
    throw new Error("Invalid test modes specified: ".concat(modes));
  }

  var projects = validModes.map(function (mode) {
    return VALID_TEST_MODES[mode];
  });
  var jestArgs = ['--projects'].concat(_toConsumableArray(projects));

  if (pattern) {
    jestArgs.push('--testPathPattern', pattern);
  }

  if (watch) {
    jestArgs.push('--watch');
  }

  if (process.env.CI === 'true') {
    jestArgs.push('--ci');
  }

  return jestArgs;
};